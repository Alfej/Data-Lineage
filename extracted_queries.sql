-- Query 1
SELECT CURRENT_TIMESTAMP(0); ------------------------- EXEC PEPCMN_P.STEP_STRT('DWL', 'LD_DWL_PGT_CUST_SERV', 'DWL_PGT_FLNA_LOAD_CUST_SRVC_WKLY', '/etlapps/prds2/dwl/intl/logs/LD_DWL_PGT_CUST_SERV_DWL_PGT_FLNA_LOAD_CUST_SRVC_WKLY.log'); grep: /etlapps/prds2/dwl/intl/tmp/LD_DWL_PGT_CUST_SERV.DWL_PGT_FLNA_LOAD_CUST_SRVC_WKLY.DWL_FLNA_PGT_LOAD_CUST_SRVC_WKLY.wkf: No such file or directory Executing load task SELECT CURRENT_TIMESTAMP(0); ------------------------- /* =========================================================================== Calendar data needed for Customer Service TIMFRM_NUM 4 - CY YTD LFW TIMFRM_NUM 20 - YAG FY LFW TIMFRM_NUM 21 - 2YAG FY TIMFRM_NUM 123 - CY FULL CW TIMFRM_NUM 136 - CY FCW 1-12 =========================================================================== */ CREATE VOLATILE TABLE V_CUST_SERV_TIME_RANGE AS ( SEL Trim(TIM.YR_NUM) AS SALE_TKT_YR, LPad(Trim(TIM.CALDR_DTPRD3_IN_YR_NUM), 2, '0') AS SALE_TKT_PD, Trim(TIM.CALDR_WK_IN_DTPRD3_NUM) AS SALE_TKT_WK, TIM.DAY_DT AS SALE_TKT_DLY_DT, Trim(TIM.YR_NUM)||LPad(Trim(TIM.CALDR_DTPRD3_IN_YR_NUM), 2, '0')||Trim(TIM.CALDR_WK_IN_DTPRD3_NUM) AS SALE_TKT_FL_WK_DT, TIM.CALDR_WK_STRT_DT AS WK_START_DT, TIMFRM.TMFRM_NUM, Case when TIMFRM.TMFRM_NUM in (4,20,21) then 'HTFRAME' else 'FTFRAME' end as TIME_FLAG FROM DWL_P.DW_PEP_CALDR_DT TIM INNER JOIN DWL_P.DW_TMSLC_CUR_REF_DT TIMFRM ON TIM.DAY_DT = TIMFRM.CALDR_DT AND TMFRM_NUM IN (4, 20, 21, 136, 123) WHERE TIM.CALDR_ID = 11 AND TIM.DAY_DT> '2020-01-01' /* cc added filter condition*/ ) WITH DATA PRIMARY INDEX (SALE_TKT_DLY_DT) ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 2
COLLECT STATISTICS COLUMN (SALE_TKT_YR ,SALE_TKT_PD ,SALE_TKT_WK ,SALE_TKT_FL_WK_DT ,WK_START_DT) ON V_CUST_SERV_TIME_RANGE; COLLECT STATISTICS COLUMN (WK_START_DT) ON V_CUST_SERV_TIME_RANGE; COLLECT STATISTICS COLUMN (SALE_TKT_DLY_DT) ON V_CUST_SERV_TIME_RANGE; /* =========================================================================== Build Customer Service customer base - The weekly customers are service eligible customers - Eligible subaccounts customers are all treated as 'SM' channel format. - 7/2025: Change Customer to route and route type from current to date effective =========================================================================== */ CREATE VOLATILE TABLE V_CUST_SERV_ELIG_BASE AS ( SEL CUST.DW_CUST_ID, Trim(CUST.CUST_ID) AS CUST_ID, CUST.XREF_CUST_ID, CUST.XREF_DW_CUST_ID, CUST.CUST_STTS_CDV AS CUST_STAT_CODE, Coalesce(CUST.CUST_LTST_SLS_DT, DATE '9999-12-29') AS MOST_RCNT_SALE_DT, CUST.TRADE_CHANL_FMT, DLY.DAY_DT, TIM.WK_START_DT, TIM.TIME_FLAG FROM DWL_P.DW_CUST_RPRTNG_ATRBT CUST INNER JOIN DWL_P_DRVD.PGT_FLNA_CUST_VIST_ACTVTY_MEAS_DAILY DLY ON DLY.DW_CUST_ID = CUST.DW_CUST_ID INNER JOIN V_CUST_SERV_TIME_RANGE TIM ON DLY.DAY_DT = TIM.SALE_TKT_DLY_DT WHERE DLY.SLS_ORG_CDV = 'US29' -- SAS customer filter AND DLY.SAS_CUST_FLG = 'Y' ) WITH DATA PRIMARY INDEX (DW_CUST_ID,DAY_DT) ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 3
COLLECT STATISTICS COLUMN (DW_CUST_ID, DAY_DT) ON V_CUST_SERV_ELIG_BASE; COLLECT STATISTICS COLUMN (TRADE_CHANL_FMT) ON V_CUST_SERV_ELIG_BASE; COLLECT STATISTICS COLUMN (DW_CUST_ID) ON V_CUST_SERV_ELIG_BASE; /* =========================================================================== Aggregate daily service measures to weekly and apply the Zone and Week exclusions. =========================================================================== */ CREATE VOLATILE TABLE V_CUST_AGGR_SAS_WKLY AS ( -- HT Timeframe SEL DLY.DW_CUST_ID, DLY.CUST_ID, CUST.WK_START_DT, CUST.TRADE_CHANL_FMT, CASE WHEN CUST.CUST_STAT_CODE = 3 AND CUST.WK_START_DT > Coalesce (CUST.MOST_RCNT_SALE_DT, DATE '9999-12-29') THEN 0 ELSE 1 END AS WK_CUST_STAT_CODE, -- raw calls Sum(DLY.RECOM_CALL_QTY) AS RCMNDD_CALL_QTY, Sum(DLY.ACTL_CALL_QTY) AS ACTL_CALL_QTY, -- SAS without exclusion Sum(DLY.RCMNDD_CALL_SAS_QTY) AS ORIG_RCMNDD_CALL_SAS_QTY, Sum(DLY.ACTL_DLVRY_CALL_SAS_QTY) AS ORIG_ACTL_CALL_SAS_QTY, -- SAS with exclusion Sum(DLY.RPRT_RCMNDD_CALL_SAS_QTY) AS RCMNDD_CALL_SAS_QTY, Sum(DLY.RPRT_ACTL_DLVRY_CALL_SAS_QTY) AS ACTL_CALL_SAS_QTY, -- MISS CALL sum(actl_missd_call_qty) as actl_missd_call_qty FROM DWL_P_DRVD.PGT_FLNA_CUST_VIST_ACTVTY_MEAS_DAILY DLY INNER JOIN V_CUST_SERV_ELIG_BASE CUST ON DLY.DW_CUST_ID = CUST.DW_CUST_ID AND DLY.DAY_DT = CUST.DAY_DT WHERE DLY.SAS_CUST_FLG = 'Y' AND CUST.TIME_FLAG = 'HTFRAME' GROUP BY 1,2,3,4,5 UNION ALL -- Future time frame SEL DLY.DW_CUST_ID, DLY.CUST_ID, CUST.WK_START_DT, CUST.TRADE_CHANL_FMT, CASE WHEN CUST.CUST_STAT_CODE = 3 AND CUST.WK_START_DT > Coalesce (CUST.MOST_RCNT_SALE_DT, DATE '9999-12-29') THEN 0 ELSE 1 END AS WK_CUST_STAT_CODE, -- raw calls Sum(DLY.RECOM_CALL_QTY) AS RCMNDD_CALL_QTY, Sum(DLY.ACTL_CALL_QTY) AS ACTL_CALL_QTY, -- SAS without exclusion Sum(DLY.RCMNDD_CALL_SAS_QTY) AS ORIG_RCMNDD_CALL_SAS_QTY, Sum(DLY.ACTL_DLVRY_CALL_SAS_QTY) AS ORIG_ACTL_CALL_SAS_QTY, -- SAS with exclusion Sum(DLY.RPRT_RCMNDD_CALL_SAS_QTY) AS RCMNDD_CALL_SAS_QTY, Sum(DLY.RPRT_ACTL_DLVRY_CALL_SAS_QTY) AS ACTL_CALL_SAS_QTY, -- MISS CALL sum(actl_missd_call_qty) as actl_missd_call_qty FROM DWL_P_DRVD.PGT_FLNA_CUST_VIST_ACTVTY_MEAS_DAILY DLY INNER JOIN V_CUST_SERV_ELIG_BASE CUST ON DLY.DW_CUST_ID = CUST.DW_CUST_ID AND DLY.DAY_DT = CUST.DAY_DT WHERE CUST.TIME_FLAG = 'FTFRAME' GROUP BY 1,2,3,4,5 ) WITH DATA PRIMARY INDEX (DW_CUST_ID, WK_START_DT) ON COMMIT PRESERVE ROWS ;

--------------------------------------------------------------------------------

-- Query 4
COLLECT STATISTICS ON V_CUST_AGGR_SAS_WKLY COLUMN (DW_CUST_ID, WK_START_DT); COLLECT STATISTICS ON V_CUST_AGGR_SAS_WKLY COLUMN (DW_CUST_ID); /*====================Get Week Dates for Weekly=================*/ CREATE VOLATILE TABLE V_CUST_SERV_TIME_WK_RANGE AS ( SELECT DISTINCT WK_START_DT FROM V_CUST_SERV_TIME_RANGE ) WITH DATA PRIMARY INDEX(WK_START_DT) ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 5
/* =========================================================================== Build a timeslice calendar for call range aggregation: When a customer is visited in less frequently, for example, every other week, we want to get the call qty on an aggregated either from 3 weeks or 5 weeks before and after the reporting week. Two ranges are defined: 1. STD_TIMFR_RNG3 - Per each WK_START_DT, 3 weeks are included in the range: 1 week before the WK_START_DT the WK_START_DT 1 week after the WK_START_DT 2. STD_TIMFR_RNG5 - Per each WK_START_DT, 5 weeks are included in the range: 2 week before the WK_START_DT the WK_START_DT 2 week after the WK_START_DT =========================================================================== */ CREATE MULTISET VOLATILE TABLE V_CUST_STD_CALC_RANGE AS ( -- for STD_RECOM_CALL_QTY = 0.25 SEL REF.WK_START_DT AS REF_WK_START_DT, RNG.WK_START_DT, 'STD_TIMFR_RNG5' AS TIMFR_NM FROM V_CUST_SERV_TIME_WK_RANGE REF INNER JOIN V_CUST_SERV_TIME_WK_RANGE RNG ON RNG.WK_START_DT BETWEEN REF.WK_START_DT - 14 AND REF.WK_START_DT + 14 UNION ALL -- for STD_RECOM_CALL_QTY = 0.50 SEL REF.WK_START_DT AS REF_WK_START_DT, RNG.WK_START_DT, 'STD_TIMFR_RNG3' AS TIMFR_NM FROM V_CUST_SERV_TIME_WK_RANGE REF INNER JOIN V_CUST_SERV_TIME_WK_RANGE RNG ON RNG.WK_START_DT BETWEEN REF.WK_START_DT - 7 AND REF.WK_START_DT + 7 ) WITH DATA PRIMARY INDEX(REF_WK_START_DT,TIMFR_NM) ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 6
COLLECT STATISTICS ON V_CUST_STD_CALC_RANGE COLUMN (WK_START_DT); /* =========================================================================== Add aggregate calls per STS special week ranges when STD recommend call < 1. =========================================================================== */ CREATE MULTISET VOLATILE TABLE V_CUST_WK_ACTL_CALL_RANGE AS ( SEL DW_CUST_ID, REF_WK_START_DT AS WK_START_DT, Sum(ACTL_CALL_QTY_RNG3) ACTL_CALL_QTY_RNG3, Sum(ACTL_CALL_QTY_RNG5) ACTL_CALL_QTY_RNG5 FROM ( SEL DISTINCT CUST.DW_CUST_ID, REF.REF_WK_START_DT, REF.TIMFR_NM, Sum(CASE WHEN REF.TIMFR_NM = 'STD_TIMFR_RNG3' THEN Coalesce(SAS.ACTL_CALL_QTY, 0) ELSE 0 END) AS ACTL_CALL_QTY_RNG3, Sum(CASE WHEN REF.TIMFR_NM = 'STD_TIMFR_RNG5' THEN Coalesce(SAS.ACTL_CALL_QTY, 0) ELSE 0 END) AS ACTL_CALL_QTY_RNG5 FROM ( SEL DISTINCT DW_CUST_ID, WK_START_DT FROM V_CUST_SERV_ELIG_BASE ) CUST LEFT OUTER JOIN V_CUST_AGGR_SAS_WKLY SAS ON SAS.DW_CUST_ID = CUST.DW_CUST_ID AND SAS.WK_START_DT = CUST.WK_START_DT INNER JOIN V_CUST_STD_CALC_RANGE REF ON CUST.WK_START_DT = REF.WK_START_DT GROUP BY 1,2,3 ) A GROUP BY 1,2 ) WITH DATA PRIMARY INDEX(DW_CUST_ID,WK_START_DT) ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 7
COLLECT STATISTICS ON V_CUST_WK_ACTL_CALL_RANGE COLUMN (DW_CUST_ID, WK_START_DT); /* =========================================================================== Retrive customers who has 12 week sales averages who will assign STDs. =========================================================================== */ CREATE MULTISET VOLATILE TABLE V_STD_WSA_CUST AS ( SEL CUST.DW_CUST_ID, CUST.CUST_ID, CAL.WK_START_DT, CUST.TRADE_CHANL_FMT, CASE WHEN CUST.CUST_STAT_CODE = 3 AND CAL.WK_START_DT > Coalesce (CUST.MOST_RCNT_SALE_DT, DATE '9999-12-29') THEN 0 ELSE 1 END AS WK_CUST_STAT_CODE, SLS.CY_R12WK_LCW_TKT_SLS_AMT/12.0000 AS R12_WK_SLS_AVG FROM SEM_EXTRCT.DLS_FLNA_SLS_CUST_TMFRM_MEAS_WKLY SLS INNER JOIN V_CUST_SERV_ELIG_BASE CUST ON CUST.DW_CUST_ID = SLS.XREF_DW_CUST_ID AND CUST.WK_START_DT = SLS.WK_STRT_DT INNER JOIN V_CUST_SERV_TIME_WK_RANGE CAL ON SLS.WK_STRT_DT = CAL.WK_START_DT where SLS.CRU_ID = 46 GROUP BY 1,2,3,4,5,6 ) WITH DATA PRIMARY INDEX(DW_CUST_ID,WK_START_DT) ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 8
--sel count(*) from V_STD_WSA_CUST; COLLECT STATISTICS COLUMN (TRADE_CHANL_FMT) ON V_STD_WSA_CUST; COLLECT STATISTICS COLUMN (DW_CUST_ID ,WK_START_DT) ON V_STD_WSA_CUST; COLLECT STATISTICS COLUMN (WK_CUST_STAT_CODE) ON V_STD_WSA_CUST; COLLECT STATISTICS COLUMN (WK_START_DT) ON V_STD_WSA_CUST; COLLECT STATISTICS COLUMN (R12_WK_SLS_AVG) ON V_STD_WSA_CUST; /* =========================================================================== Derive National Standards. Thress facts required to determin a national standard call qty: 1. Customer format (per its Trade Channel) 2. Weekly Rolling 12wk Sales average 3. National threshold ranges =========================================================================== */ CREATE VOLATILE TABLE V_CUST_STD_WKLY AS ( SEL SLS_AVG.DW_CUST_ID, SLS_AVG.CUST_ID, SLS_AVG.WK_START_DT, SLS_AVG.WK_CUST_STAT_CODE, SLS_AVG.TRADE_CHANL_FMT, SLS_AVG.R12_WK_SLS_AVG, Coalesce(THRSD.NATL_STD_RECOM_CALL_QTY,0.0000) AS NATL_STD_RECOM_CALL_QTY, Coalesce(RNG.ACTL_CALL_QTY_RNG3,0.00) AS ACTL_CALL_QTY_RNG3, Coalesce(RNG.ACTL_CALL_QTY_RNG5,0.00) AS ACTL_CALL_QTY_RNG5, THRSD.VOLBAND AS WKLY_VOLBAND, 1 STD_FLG FROM V_STD_WSA_CUST SLS_AVG -- national thresholds INNER JOIN ACQ_P.PGT_FLNA_OPS_CUST_NATL_STD_SERV_CALL_DT_EFF THRSD ON SLS_AVG.TRADE_CHANL_FMT = THRSD.TRADE_CHANL_FMT AND SLS_AVG.WK_START_DT BETWEEN THRSD.CUST_NATL_STD_EFF_DT AND THRSD.CUST_NATL_STD_END_DT AND SLS_AVG.R12_WK_SLS_AVG >= THRSD.LOW_PD_12WKAVG_TKT_SALE_AMT AND SLS_AVG.R12_WK_SLS_AVG < THRSD.HI_PD_12WKAVG_TKT_SALE_AMT -- STD range sum for ACTL_PROD_DELIV_CALL_QTY LEFT OUTER JOIN V_CUST_WK_ACTL_CALL_RANGE RNG ON RNG.DW_CUST_ID = SLS_AVG.DW_CUST_ID AND RNG.WK_START_DT = SLS_AVG.WK_START_DT -- Acitve (Non-close weeks) customers WHERE SLS_AVG.WK_CUST_STAT_CODE = 1 ) WITH DATA PRIMARY INDEX (DW_CUST_ID, WK_START_DT) ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 9
--sel count(*) from V_CUST_STD_WKLY; /* =========================================================================== Final service weekly - Combining aggregated weekly SAS and STD. =========================================================================== */ CREATE VOLATILE TABLE V_CUST_SERV_WKLY_FNL AS ( SEL Coalesce(SAS.DW_CUST_ID, STD.DW_CUST_ID) DW_CUST_ID, Coalesce(SAS.CUST_ID, STD.CUST_ID) CUST_ID, Coalesce(SAS.WK_START_DT, STD.WK_START_DT) WK_START_DT, Coalesce(SAS.WK_CUST_STAT_CODE, STD.WK_CUST_STAT_CODE) WK_CUST_STAT_CODE, Coalesce(SAS.TRADE_CHANL_FMT, STD.TRADE_CHANL_FMT) TRADE_CHANL_FMT, Coalesce(STD.R12_WK_SLS_AVG, 0.0000) AS R12_WSA, -- Raw call measures (alias name has to be different to avoid null Coalesce(SAS.RCMNDD_CALL_QTY, 0.0000) AS RCMNDD_CALL_QTY_A, Coalesce(SAS.ACTL_CALL_QTY, 0.0000) AS ACTL_CALL_QTY_A, -- SAS call measures with exclusion Coalesce(SAS.RCMNDD_CALL_SAS_QTY, 0.0000) AS RCMNDD_CALL_SAS_QTY, Coalesce(SAS.ACTL_CALL_SAS_QTY, 0.0000) AS ACTL_CALL_SAS_QTY, -- SAS call measures without exclusion Coalesce(SAS.ORIG_RCMNDD_CALL_SAS_QTY, 0.0000) AS ORIG_RCMNDD_CALL_SAS_QTY, Coalesce(SAS.ORIG_ACTL_CALL_SAS_QTY, 0.0000) AS ORIG_ACTL_CALL_SAS_QTY, -- National Standards call measures Coalesce(STD.NATL_STD_RECOM_CALL_QTY,0.0000) AS STD_RECOM_CALL_QTY, CASE WHEN STD.DW_CUST_ID IS NULL THEN 0 -- Handle STD recommended call less than 0 WHEN STD_RECOM_CALL_QTY = 0.25 AND Coalesce(STD.ACTL_CALL_QTY_RNG5,0) > 0 THEN STD_RECOM_CALL_QTY WHEN STD_RECOM_CALL_QTY = 0.25 AND Coalesce(STD.ACTL_CALL_QTY_RNG5,0) <= 0 THEN 0 WHEN STD_RECOM_CALL_QTY = 0.50 AND Coalesce(STD.ACTL_CALL_QTY_RNG3,0) > 0 THEN STD_RECOM_CALL_QTY WHEN STD_RECOM_CALL_QTY = 0.50 AND Coalesce(STD.ACTL_CALL_QTY_RNG3,0) <= 0 THEN 0 -- Standard actual call will not exceed Standard recommended call qty. WHEN ACTL_CALL_QTY_A > STD_RECOM_CALL_QTY THEN STD_RECOM_CALL_QTY ELSE ACTL_CALL_QTY_A END AS STD_ACTL_CALL_QTY, -- Derived KPIs CASE WHEN ACTL_CALL_QTY_A < STD_RECOM_CALL_QTY THEN STD_RECOM_CALL_QTY - ACTL_CALL_QTY_A ELSE 0 END AS UNDR_SRVC, CASE WHEN ACTL_CALL_QTY_A = STD_RECOM_CALL_QTY THEN STD_RECOM_CALL_QTY ELSE 0 END AS AT_SRVC, CASE WHEN ACTL_CALL_QTY_A > STD_RECOM_CALL_QTY AND STD_RECOM_CALL_QTY > 0 THEN ACTL_CALL_QTY_A - STD_RECOM_CALL_QTY ELSE 0 END AS OVR_SRVC, CASE WHEN STD_ACTL_CALL_QTY < STD_RECOM_CALL_QTY THEN STD_RECOM_CALL_QTY - STD_ACTL_CALL_QTY ELSE 0 END AS STD_MISS, --CASE WHEN ACTL_CALL_QTY_A < RCMNDD_CALL_SAS_QTY THEN RCMNDD_CALL_SAS_QTY - ACTL_CALL_QTY_A ELSE 0 END AS CAM_MISS, actl_missd_call_qty as CAM_MISS, 1 AS SRVC_WK, -- weekly volband for customers CASE WHEN STD.WKLY_VOLBAND IS NULL AND Coalesce(SAS.TRADE_CHANL_FMT,STD.TRADE_CHANL_FMT) IS NULL THEN 'NO VOLBAND' WHEN STD.WKLY_VOLBAND IS NULL AND Coalesce(SAS.TRADE_CHANL_FMT,STD.TRADE_CHANL_FMT) = 'SM' THEN '(SM) CLOSED' WHEN STD.WKLY_VOLBAND IS NULL AND Coalesce(SAS.TRADE_CHANL_FMT,STD.TRADE_CHANL_FMT) = 'LG' THEN '(LG) CLOSED' ELSE STD.WKLY_VOLBAND END AS WKLY_VOLBAND , 'Y' as CUST_FLAG FROM V_CUST_AGGR_SAS_WKLY SAS -- STD FULL OUTER JOIN V_CUST_STD_WKLY STD ON STD.DW_CUST_ID = SAS.DW_CUST_ID AND STD.WK_START_DT = SAS.WK_START_DT ) WITH DATA PRIMARY INDEX (DW_CUST_ID, WK_START_DT) ON COMMIT PRESERVE ROWS ;

--------------------------------------------------------------------------------

-- Query 10
COLLECT STATISTICS ON V_CUST_SERV_WKLY_FNL COLUMN (DW_CUST_ID); COLLECT STATISTICS ON V_CUST_SERV_WKLY_FNL COLUMN (DW_CUST_ID, WK_START_DT); /***************************************************************************************************** Volatile table creation for customer exclusion CREATE VOLATILE TABLE V_CUST_EXCLUSION as ( select A.dw_cust_id, A.cust_id, CASE WHEN CL.PARM_ATRBT1_VAL IS NULL THEN 'Y' ELSE 'N' END AS CUST_LIST_FLG -- CUST_EXCLUSIOn from V_CUST_SERV_WKLY_FNL A inner join DWL_P.DW_CUST_RPRTNG_ATRBT B on A.dw_cust_id = B.dw_cust_id left outer join DWL_P.DW_DATA_PARM_ATRBT_VAL CL on B.CUST_ID = CL.PARM_ATRBT1_VAL AND CL.PARM_ID = 37 AND CL.SYS_ID = '702' AND CL.CTRY_CDV = 'US' AND CL.CO_CDV = 'US29' and A.WK_START_DT >= Cast(CL.PARM_ATRBT2_VAL as date) AND A.WK_START_DT <= Cast(CL.PARM_ATRBT3_VAL as date) )WITH DATA ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 11
/***************************************************************************************************** Update Flag for customer exclusion UPDATE TGT FROM V_CUST_SERV_WKLY_FNL TGT, (SEL DISTINCT DW_CUST_ID FROM DWL_P.DW_CUST_RPRTNG_ATRBT WHERE SYS_ID ='627' AND CTRY_CDV='US') B , (SEL DISTINCT DW_CUST_ID,CUST_LIST_FLG FROM V_CUST_EXCLUSION) C SET CUST_FLAG = C.CUST_LIST_FLG WHERE TGT.DW_CUST_ID = B.DW_CUST_ID and B.DW_CUST_ID = C.DW_CUST_ID;

--------------------------------------------------------------------------------

-- Query 12
/* =========================================================================== Retrive 'Delivery' activity code and name from Visit Plan. The service is only measured based on delivery activities. =========================================================================== */ CREATE VOLATILE TABLE V_DELIV_NM_WKLY AS ( SEL VIST_ACTVTY1_CDV, VIST_ACTVTY1_NM, Max(CUST_VISTSCHD_DT) MAX_DT FROM SEM_EXTRCT.DW_CUST_VISTSCHD_DAY_PLANACTY WHERE VIST_ACTVTY1_CDV = 'D' and GTMU_ID IN (5,799) GROUP BY 1,2 ) WITH DATA ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 13
-- ============ COMMENTS - NOT INCLUDE IN ETL ========================= -- Now that all customers are assigned volband, it's time to create -- a unique current alignment volband. -- ==================================================================== CREATE VOLATILE TABLE V_VOLBAND_CURR AS ( WITH V_FNL_CUST AS ( -- Get defualt customers Volband SEL DISTINCT DW_CUST_ID, TRADE_CHANL_FMT, WK_CUST_STAT_CODE, CASE WHEN TRADE_CHANL_FMT = 'LG' THEN '(LG) CLOSED' ELSE '(SM) CLOSED' END AS VBAND_DEFAULT FROM V_CUST_SERV_WKLY_FNL ), V_WSA AS ( -- Get Current CY LCW R12 WSA for each customer SEL A.XREF_DW_CUST_ID, A.WK_STRT_DT, CAST(COALESCE(A.CY_R12WK_LCW_TKT_SLS_AMT,0) / 12.00 AS DECIMAL(18,2)) AS R12_WSA FROM SEM_EXTRCT.DLS_FLNA_SLS_CUST_TMFRM_MEAS_WKLY AS A INNER JOIN SEM_EXTRCT.DLS_FLNA_TIME_TBL_V AS T ON A.WK_STRT_DT = T.SALE_TKT_DLY_DT AND T.CURR_WK_FLG = 'Y' where A.CRU_ID = 46 AND A.GTMU_ID=799 --WHERE DW_CUST_ID = 5330001772796 )

--------------------------------------------------------------------------------

-- Query 14
-- Look up Volbands SEL A.DW_CUST_ID, A.TRADE_CHANL_FMT, COALESCE(V.R12_WSA, 0) AS WSA, CASE WHEN A.WK_CUST_STAT_CODE = 0 THEN A.VBAND_DEFAULT ELSE COALESCE(B.VOLBAND, A.VBAND_DEFAULT) END AS VOLBAND_CURR FROM V_FNL_CUST A LEFT OUTER JOIN V_WSA V ON A.DW_CUST_ID = V.XREF_DW_CUST_ID LEFT OUTER JOIN ACQ_P.PGT_FLNA_OPS_CUST_NATL_STD_SERV_CALL_DT_EFF AS B ON B.TRADE_CHANL_FMT = A.TRADE_CHANL_FMT AND WSA BETWEEN B.LOW_PD_12WKAVG_TKT_SALE_AMT AND B.HI_PD_12WKAVG_TKT_SALE_AMT AND CURRENT_DATE BETWEEN B.CUST_NATL_STD_EFF_DT AND B.CUST_NATL_STD_END_DT ) WITH DATA PRIMARY INDEX (DW_CUST_ID) ON COMMIT PRESERVE ROWS;

--------------------------------------------------------------------------------

-- Query 15
/******************************************************************************************************/ /* Next SQL statement will delete last 2 years data from FLNA_CUST_VIST_ACTVTY_MEAS_WKLY */ /******************************************************************************************************/ DELETE FROM DWL_P_DRVD.PGT_FLNA_CUST_VIST_ACTVTY_MEAS_WKLY WHERE wk_strt_dt in ( SELECT wk_start_dt from V_CUST_SERV_TIME_RANGE) ;

--------------------------------------------------------------------------------

-- Query 16
/******************************************************************************************************/ /* Next SQL statement will insert data into the target table after evaluating Standard Recommended */ /* Delivery Calls based on daily rollup of previous week and week after and */ /* National Standard grouping */ /******************************************************************************************************/ INSERT INTO DWL_P_DRVD.PGT_FLNA_CUST_VIST_ACTVTY_MEAS_WKLY ( DW_CUST_ID, WK_STRT_DT, CUST_VIST_ACTVTY_CDV, CUST_VIST_ACTVTY_NM, CRU_ID, CUST_ID, CTRY_CDV, CO_CDV, CLNT_ID ,ZSYSID ,ACQ_PGT_SYS_ID ,ACQ_MDM_SYS_ID ,ACQ_LAST_UPDT_DTM ,SLS_ORG_CDV, R12WK_TKT_SLS_AVG_AMT, STD_RCMNDD_CALL_QTY, ACTL_STD_CALL_QTY, RCMNDD_CALL_QTY, ACTL_CALL_QTY, RCMNDD_CALL_SAS_QTY, ACTL_CALL_SAS_QTY, STD_MISSD_CALL_QTY, ACTL_MISSD_CALL_QTY, ACTL_LT_STD_RCMNDD_CALL_QTY, ACTL_EQL_STD_RCMNDD_CALL_QTY, ACTL_EXCD_STD_RCMNDD_CALL_QTY, CUST_RPRT_GRP_NM, DW_BTCH_ID, DW_STEP_ID, DW_CRTD_DTM, DW_UPDT_DTM, ORIG_RCMNDD_CALL_SAS_QTY, ORIG_ACTL_CALL_SAS_QTY )

--------------------------------------------------------------------------------

-- Query 17
SELECT F.DW_CUST_ID, F.WK_START_DT, D.VIST_ACTVTY1_CDV AS CUST_VIST_ACTVTY_CDV, D.VIST_ACTVTY1_NM AS CUST_VIST_ACTVTY_NM, 46, F.CUST_ID, 'US', 'US29', '500' AS CLNT_ID, 'A1P' AS ZSYSID, 'GMP' AS ACQ_PGT_SYS_ID, '62735' AS ACQ_MDM_SYS_ID, CURRENT_TIMESTAMP(0) AS ACQ_LAST_UPDT_DTM, 'US29' AS SLS_ORG_CDV, CASE WHEN dt.time_flag = 'HTFRAME' THEN F.R12_WSA ELSE 0 END AS R12_WSA, CASE WHEN dt.time_flag = 'HTFRAME' THEN F.STD_RECOM_CALL_QTY ELSE 0 END AS STD_RECOM_CALL_QTY, CASE WHEN dt.time_flag = 'HTFRAME' THEN F.STD_ACTL_CALL_QTY ELSE 0 END AS STD_ACTL_CALL_QTY , F.RCMNDD_CALL_QTY_A, F.ACTL_CALL_QTY_A, F.RCMNDD_CALL_SAS_QTY, F.ACTL_CALL_SAS_QTY, CASE WHEN dt.time_flag = 'HTFRAME' THEN F.STD_MISS ELSE 0 END AS STD_MISS, F.CAM_MISS, CASE WHEN dt.time_flag = 'HTFRAME' THEN F.UNDR_SRVC ELSE 0 END AS ACTL_LT_STD_RCMNDD_CALL_QTY, CASE WHEN dt.time_flag = 'HTFRAME' THEN F.AT_SRVC ELSE 0 END AS ACTL_EQL_STD_RCMNDD_CALL_QTY, CASE WHEN dt.time_flag = 'HTFRAME' THEN F.OVR_SRVC ELSE 0 END AS ACTL_EXCD_STD_RCMNDD_CALL_QTY , B.VOLBAND_CURR, THIS_STEP.mybtch_id, THIS_STEP.mystep_id, Current_Timestamp(0), Current_Timestamp(0), -- Non Exclusion SAS measures F.ORIG_RCMNDD_CALL_SAS_QTY, F.ORIG_ACTL_CALL_SAS_QTY FROM V_CUST_SERV_WKLY_FNL F INNER JOIN V_DELIV_NM_WKLY D ON 1=1 INNER JOIN V_VOLBAND_CURR B ON B.DW_CUST_ID = F.DW_CUST_ID LEFT OUTER JOIN ( select distinct(WK_START_DT), time_flag from V_CUST_SERV_TIME_RANGE )dt on f.wk_start_dt = dt.WK_START_DT LEFT OUTER JOIN ( SELECT max(actvty.cur_btch_id) as mybtch_id , max(step.step_id) as mystep_id FROM PEPCMN_P.STEP INNER JOIN PEPCMN_P.ACTVTY ON actvty.actvty_id = step.actvty_id INNER JOIN PEPCMN_P.SYS ON sys.sys_nm = actvty.sys_nm WHERE SYS.SYS_NM ='DWL' AND ACTVTY_NM = 'LD_DWL_PGT_CUST_SERV' AND STEP_NM = 'DWL_PGT_FLNA_LOAD_CUST_SRVC_WKLY' ) THIS_STEP ON 1=1 where F.cust_flag = 'Y' ;

--------------------------------------------------------------------------------

-- Query 18
/*UPDATE DWL_P_DRVD.PGT_FLNA_CUST_VIST_ACTVTY_MEAS_WKLY SET STD_RCMNDD_CALL_QTY = 0, ACTL_STD_CALL_QTY = 0, STD_MISSD_CALL_QTY = 0, ACTL_MISSD_CALL_QTY = 0, ACTL_LT_STD_RCMNDD_CALL_QTY = 0, ACTL_EQL_STD_RCMNDD_CALL_QTY = 0, ACTL_EXCD_STD_RCMNDD_CALL_QTY = 0 WHERE DW_CUST_ID IN ( SEL DW_CUST_ID FROM DWL_P.DW_CUST_RPRTNG_ATRBT WHERE GEO_TYP_CDV = 'RTL' AND SLS_ORG_CDV = 'US29' and SYS_ID = '627' AND PGT_CHAIN_LVL_6_ID in(select PARM_ATRBT1_VAL from DWL_P.DW_DATA_PARM_ATRBT_VAL where PARM_ID = 31 and SYS_ID = 702 and CTRY_CDV = 'US' and CO_CDV = 'US29') )

--------------------------------------------------------------------------------

-- Query 19
UPDATE TGT FROM DWL_P_DRVD.PGT_FLNA_CUST_VIST_ACTVTY_MEAS_WKLY TGT, DWL_P.DW_CUST_RPRTNG_ATRBT B, DWL_P.DW_DATA_PARM_ATRBT_VAL C SET STD_RCMNDD_CALL_QTY = 0, ACTL_STD_CALL_QTY = 0, STD_MISSD_CALL_QTY = 0, ACTL_MISSD_CALL_QTY = 0, ACTL_LT_STD_RCMNDD_CALL_QTY = 0, ACTL_EQL_STD_RCMNDD_CALL_QTY = 0, ACTL_EXCD_STD_RCMNDD_CALL_QTY = 0 WHERE TGT.DW_CUST_ID = B.DW_CUST_ID AND B.PGT_CHAIN_LVL_6_ID = C.PARM_ATRBT1_VAL AND B.GEO_TYP_CDV = 'RTL' AND B.SLS_ORG_CDV = 'US29' AND B.SYS_ID = '627' AND C.PARM_ID = 31 AND C.SYS_ID = 702 AND C.CTRY_CDV = 'US' AND C.CO_CDV = 'US29' AND TGT.WK_STRT_DT >= CAST(C.PARM_ATRBT2_VAL AS DATE) AND TGT.WK_STRT_DT <= CAST(C.PARM_ATRBT4_VAL AS DATE);

--------------------------------------------------------------------------------

-- Query 20
UPDATE TGT FROM DWL_P_DRVD.PGT_FLNA_CUST_VIST_ACTVTY_MEAS_WKLY TGT,(SELECT DISTINCT CUST_ID,XREF_CUST_ID,XREF_DW_CUST_ID,WK_START_DT FROM V_CUST_SERV_ELIG_BASE) CUST_XREF SET XREF_CUST_ID=CUST_XREF.XREF_CUST_ID ,XREF_DW_CUST_ID = CUST_XREF.XREF_DW_CUST_ID WHERE TGT.CUST_ID = CUST_XREF.CUST_ID AND TGT.WK_STRT_DT = CUST_XREF.WK_START_DT --AND TGT.XREF_CUST_ID IS NULL ;

--------------------------------------------------------------------------------

-- Query 21
SELECT CURRENT_TIMESTAMP(0); ------------------------- /***************** ERROR HANDLING ********************************/ /***************** ERROR HANDLING ********************************/ SELECT CURRENT_TIMESTAMP(0); ------------------------- EXEC PEPCMN_P.STEP_END('DWL', 'LD_DWL_PGT_CUST_SERV', 'DWL_PGT_FLNA_LOAD_CUST_SRVC_WKLY');

--------------------------------------------------------------------------------

